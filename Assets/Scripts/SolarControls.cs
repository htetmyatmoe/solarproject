//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/SolarControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @SolarControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @SolarControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""SolarControls"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""ff85d5bd-7d32-44fb-b639-0dbc6f59e7e2"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""e7adc0c9-b477-4650-a08a-82541fcc26e2"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""IncreaseIntensity"",
                    ""type"": ""Button"",
                    ""id"": ""5f1ba557-930f-44ac-a6af-b880c73787a2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DecreaseIntensity"",
                    ""type"": ""Button"",
                    ""id"": ""f10fc5f6-980c-46bb-a47e-8cfaf3264ee3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Mode"",
                    ""type"": ""Button"",
                    ""id"": ""b269f4fd-1edf-4ca3-81cc-b36d4e283c1b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""User"",
                    ""type"": ""Value"",
                    ""id"": ""b09b5a90-bd3d-4c7c-9839-cc57921df063"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""UserView"",
                    ""type"": ""Button"",
                    ""id"": ""bb404f46-52e4-4cbc-ad28-5d58186c46fa"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""04a53337-ee8a-4505-a344-d25313971b12"",
                    ""path"": ""<OculusTouchController>{LeftHand}/primaryButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""IncreaseIntensity"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0e041ad9-097d-493e-8af9-1ee167c8a5bb"",
                    ""path"": ""<OculusTouchController>{LeftHand}/secondaryButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DecreaseIntensity"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a89ce021-197f-43d0-8282-7d4665581040"",
                    ""path"": ""<XRController>{RightHand}/{PrimaryButton}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mode"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3d05cbe7-7392-4d97-adc4-d4fab4d1fb08"",
                    ""path"": ""<XRController>{LeftHand}/thumbstick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e1b498d9-9d23-4cc6-81e6-4f79d9b7b1f0"",
                    ""path"": ""<XRController>{RightHand}/thumbstick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""User"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b01b181c-4e37-427f-8d06-00ce6b05c2d8"",
                    ""path"": ""<XRController>{LeftHand}/gripPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UserView"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_Move = m_Player.FindAction("Move", throwIfNotFound: true);
        m_Player_IncreaseIntensity = m_Player.FindAction("IncreaseIntensity", throwIfNotFound: true);
        m_Player_DecreaseIntensity = m_Player.FindAction("DecreaseIntensity", throwIfNotFound: true);
        m_Player_Mode = m_Player.FindAction("Mode", throwIfNotFound: true);
        m_Player_User = m_Player.FindAction("User", throwIfNotFound: true);
        m_Player_UserView = m_Player.FindAction("UserView", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
    private readonly InputAction m_Player_Move;
    private readonly InputAction m_Player_IncreaseIntensity;
    private readonly InputAction m_Player_DecreaseIntensity;
    private readonly InputAction m_Player_Mode;
    private readonly InputAction m_Player_User;
    private readonly InputAction m_Player_UserView;
    public struct PlayerActions
    {
        private @SolarControls m_Wrapper;
        public PlayerActions(@SolarControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Player_Move;
        public InputAction @IncreaseIntensity => m_Wrapper.m_Player_IncreaseIntensity;
        public InputAction @DecreaseIntensity => m_Wrapper.m_Player_DecreaseIntensity;
        public InputAction @Mode => m_Wrapper.m_Player_Mode;
        public InputAction @User => m_Wrapper.m_Player_User;
        public InputAction @UserView => m_Wrapper.m_Player_UserView;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @IncreaseIntensity.started += instance.OnIncreaseIntensity;
            @IncreaseIntensity.performed += instance.OnIncreaseIntensity;
            @IncreaseIntensity.canceled += instance.OnIncreaseIntensity;
            @DecreaseIntensity.started += instance.OnDecreaseIntensity;
            @DecreaseIntensity.performed += instance.OnDecreaseIntensity;
            @DecreaseIntensity.canceled += instance.OnDecreaseIntensity;
            @Mode.started += instance.OnMode;
            @Mode.performed += instance.OnMode;
            @Mode.canceled += instance.OnMode;
            @User.started += instance.OnUser;
            @User.performed += instance.OnUser;
            @User.canceled += instance.OnUser;
            @UserView.started += instance.OnUserView;
            @UserView.performed += instance.OnUserView;
            @UserView.canceled += instance.OnUserView;
        }

        private void UnregisterCallbacks(IPlayerActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @IncreaseIntensity.started -= instance.OnIncreaseIntensity;
            @IncreaseIntensity.performed -= instance.OnIncreaseIntensity;
            @IncreaseIntensity.canceled -= instance.OnIncreaseIntensity;
            @DecreaseIntensity.started -= instance.OnDecreaseIntensity;
            @DecreaseIntensity.performed -= instance.OnDecreaseIntensity;
            @DecreaseIntensity.canceled -= instance.OnDecreaseIntensity;
            @Mode.started -= instance.OnMode;
            @Mode.performed -= instance.OnMode;
            @Mode.canceled -= instance.OnMode;
            @User.started -= instance.OnUser;
            @User.performed -= instance.OnUser;
            @User.canceled -= instance.OnUser;
            @UserView.started -= instance.OnUserView;
            @UserView.performed -= instance.OnUserView;
            @UserView.canceled -= instance.OnUserView;
        }

        public void RemoveCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActions @Player => new PlayerActions(this);
    public interface IPlayerActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnIncreaseIntensity(InputAction.CallbackContext context);
        void OnDecreaseIntensity(InputAction.CallbackContext context);
        void OnMode(InputAction.CallbackContext context);
        void OnUser(InputAction.CallbackContext context);
        void OnUserView(InputAction.CallbackContext context);
    }
}
